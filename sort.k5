# Merge sort example
Merge <= `{_item1 as Array<@x>, _item2 as Array<@x>} -> _ret as Array<@x>`:
    SortedAndRemaining as {sorted as Array<@x>, items as Array<@x>}
    sorted;_ret, items;_ <= Fold {:
        list <= _item1
        init <= { items <= [], sorted <= []
        over <= `{_acc as SortedAndRemaining, _item as @a, } -> _ret as SortedAndRemaining`:
            curItem <= _item
            _filtered;filtered, _rest;remItems <= FilterAndRest {:
                list <= _ret.items
                by <= LessThanOrEqual { _item2 <= curItem }
            sorted <= Concat {:
                _item <= _ret.sorted
                _item2 <= Concat {:
                    _item <= filtered
                    _item2 <= curItem
            _ret <= {:
                sorted <= sorted
                items <= remItems
sorted <= Reduce { list <= [4,3,2,6,7,1,9,7], by <= Merge }

# Insertion sort
sorted1 <= Fold {:
    list <= [4,3,2,6,7,1,9,7]
    init <= []
    by <= `{_acc as Array<@x>, _item as @x} -> _ret as Array<@x>`:
        curItem <= _item
        _filtered;lessthan, _rest;remItems <= FilterAndRest {:
            list <= _acc
            by <= LessThanOrEqual { _item2 <= curItem }
        _ret <= Concat {:
            _item <= lessthan
            _item2 <= Concat {:
                _item <= curItem
                _item2 <= remItems
