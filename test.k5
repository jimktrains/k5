Record Person:
    String fname
    String lname
    Number age

Function Person Born{String fname, String lname}:
    return Person{fname => fname, lname => lname, age => 0}

Function Birthday{Person p}:
    return Person p + {age => p.age + 1}

Cast Person p as String:
    return p.fname << " " << p.lname << " (age: " << str(p.age) << ") "

Function<Person -> Person> Age_and_Print = Lambda {Person p}:
    op := Birthday(p)
    print op
    return op

p := Born{fname => "Jim", lname => "Keener"}
Fold Repeat{item => p, times => 5} over Age_and_Print{p => _acc}

# Will print
# Jim Keener (age: 0)
# Jim Keener (age: 1)
# Jim Keener (age: 2)
# Jim Keener (age: 3)
# Jim Keener (age: 4)
# Jim Keener (age: 5)

a := [1,2,3,4]
a := [1] # Error: because a is defined in this context
print 2 * a # => [2,4,6,8]
print a + a # Error: Undefined
Fold a over Lambda (Fold a over ( Lambda{Number n, Number m}: return n * m ){n => _} )
print a * a # Error: Undefined

Function<Number -> Number> Inc = Lambda {Number n}:
    return n + 1

print Inc{n => a} # => [2,3,4,5]

print Map a over Lambda {Number n}:
    return n + 1 # => [2,3,4,5]
print ( Lambda {Number n}: return n + 1 ){n => a} # => [2,3,4,5]
